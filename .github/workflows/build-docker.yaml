name: Build and Deploy to JFrog Artifactory with Docker

on:
  workflow_dispatch:
    inputs:
      INCREMENT_TYPE:
        description: "increment type: major, minor, patch"
        type: choice
        default: 'patch'
        options:
          - 'major'
          - 'minor'
          - 'patch'
      project_id:
        description: "gcp project id"
        type: string
        default: "composer-456306"
        required: true


env:
  jfrog_url: "artifactory987.jfrog.io"
  repopath: "maven-docker"
  appname: "maven"
  cluster_name: "autopilot-cluster-1"
  region: "us-central1"

permissions:
  contents: write
  id-token: write

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set Up JDK
      - name: Set Up Java Environment
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      # Step 3: Build and Test
      - name: Build and Test
        run: |
          mvn clean package --settings settings.xml \
            -Dartifactory.username=${{ secrets.USERNAME }} \
            -Dartifactory.password=${{ secrets.PASSWORD }}
      - name: retriving version
        run: |
          # Read the current version from the VERSION file
          if [[ -f VERSION ]]; then
            CURRENT_VERSION=$(cat VERSION)
          else
            echo "VERSION file not found, initializing with 0.0.0"
            CURRENT_VERSION="0.0.0"
          fi
          echo "Current version: ${CURRENT_VERSION}"

          # Increment the patch version
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          if [[ "$INCREMENT_TYPE" == "MAJOR" ]]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [[ "$INCREMENT_TYPE" == "MINOR" ]]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          else # Default to PATCH
            PATCH=$((PATCH + 1))
            MAJOR=0
            MINOR=0
          fi
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "New version: ${NEW_VERSION}"

          # Export as environment variables for later steps
          echo "version=${NEW_VERSION}" >> $GITHUB_ENV
      # - name: Docker logging to Jfrog
      #   run: |
      #     docker login -u ${{ secrets.USERNAME }} -p ${{ secrets.PASSWORD }} ${{ env.jfrog_url }}
      - name: Authenticating to gcp
        uses:  'google-github-actions/auth@v2'
        with:
          workload_identity_provider: 'projects/829709831356/locations/global/workloadIdentityPools/github-workload-identity-pool/providers/github-provider'
          service_account: 'githubactions-sa@composer-456306.iam.gserviceaccount.com'
      - name: setup gcloud
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          version: '>= 363.0.0'
      - name: retrieving secrets from secret manager
        id: 'secrets'
        uses: 'google-github-actions/get-secretmanager-secrets@v2'
        with:
          secrets: |-
            USERNAME:projects/829709831356/secrets/username
            PASSWORD:projects/829709831356/secrets/password
      - name: export secrets to environment variables
        run: |
          echo "USERNAME=${{ steps.secrets.outputs.USERNAME }}" >> $GITHUB_ENV
          echo "PASSWORD=${{ steps.secrets.outputs.PASSWORD }}" >> $GITHUB_ENV
      - name: Docker logging to Jfrog
        run: |
          docker login -u ${{ env.USERNAME }} -p ${{ env.PASSWORD }} ${{ env.jfrog_url }}
      - name: Building docker image
        run: |
          IMAGE_NAME="${{ env.jfrog_url }}/${{ env.repopath }}/${{ env.appname }}:${{ env.version }}"
          docker build -f ./Dockerfile -t $IMAGE_NAME .
          docker push $IMAGE_NAME
          echo "IMAGE=$IMAGE_NAME" >> $GITHUB_ENV
      # - name: connecting with cluster
      #   run: |
      #     gcloud container clusters get-credentials ${{ env.cluster_name }} --region ${{ env.region }} --project ${{ inputs.project_id }}
      - name: deploying application
        run: |
          
          sed -i "s#image_name#${{ env.IMAGE }}#g" k8s/deployment.yaml
          kubectl apply -f k8s/*
          kubectl rollout status deployment myapp
      - name: Commit Updated Version
        if: success()  # Only run this step if all previous steps are successful
        run: |
          echo "${{ env.version }}" > VERSION
          git config user.name "alearning2554"
          git config user.email "learningcloud4@gmail.com"
          git add VERSION
          git commit -m "Increment version to ${{ env.version }}"
          git push origin HEAD:${{ github.ref_name }}
