name: Build and deploy to kubernetes

on:
  workflow_dispatch:
    inputs:
      INCREMENT_TYPE:
        description: "increment type: major, minor, patch"
        type: choice
        default: 'patch'
        options:
          - 'major'
          - 'minor'
          - 'patch'
      project_id:
        description: "gcp project id"
        type: string
        default: "composer-456306"
        required: true
      cluster_name:
        description: "Gke cluster name"
        type: string
        default: "autopilot-cluster-1"
        required: true
      region:
        description: "region"
        type: string
        default: "us-central1"
        required: true


env:
  jfrog_url: "artifactory987.jfrog.io"
  repopath: "maven-docker"
  appname: "maven"
  cluster_name: ${{ github.event.inputs.cluster_name }}
  region: ${{ github.event.inputs.region }}

permissions: # If you don't want to mention this, then enable workflow permissions at organization or repo level. settings->actions->general->workflow permissions
  contents: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      #  Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3

      #  Set Up JDK
      - name: Set Up Java Environment
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      #  Build and Test
      - name: Build and Test
        run: |
          mvn clean package
      # Retrieving version
      - name: retriving version
        uses: ./.github/actions/get-version
        with:
          INCREMENT_TYPE: ${{ inputs.INCREMENT_TYPE }}
      # - name: Docker logging to Jfrog
      #   run: |
      #     docker login -u ${{ secrets.USERNAME }} -p ${{ secrets.PASSWORD }} ${{ env.jfrog_url }}
      # gcloud cluster get-credentials use below plugin. So need to be installed
      - name: Install gke-gcloud-auth-plugin
        run: |
            # Create the keyring directory
            sudo mkdir -p /usr/share/keyrings

            # Import the correct public key from Google's GPG repository to the keyrings directory
            curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | gpg --dearmor | sudo tee /usr/share/keyrings/cloud.google.gpg > /dev/null

            # Add the Google Cloud SDK repository, explicitly referencing the keyring for verification
            echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee /etc/apt/sources.list.d/google-cloud-sdk.list

            # Update the package cache and install the gke-gcloud-auth-plugin
            sudo apt-get update && sudo apt-get install -y google-cloud-sdk-gke-gcloud-auth-plugin
      # gcloud use below plugin when connected to cluster
      - name: Configure environment to use GKE plugin
        run: |
          echo "USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $GITHUB_ENV
          export USE_GKE_GCLOUD_AUTH_PLUGIN=True
      - name: Authenticating to gcp
        uses:  'google-github-actions/auth@v2'
        with:
          workload_identity_provider: 'projects/829709831356/locations/global/workloadIdentityPools/github-workload-identity-pool/providers/github-provider'
          service_account: 'githubactions-sa@composer-456306.iam.gserviceaccount.com'
      - name: setup gcloud
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          version: '>= 363.0.0'
      - name: retrieving secrets from secret manager
        id: 'secrets'
        uses: 'google-github-actions/get-secretmanager-secrets@v2'
        with:
          secrets: |-
            USERNAME:projects/829709831356/secrets/username
            PASSWORD:projects/829709831356/secrets/password
      - name: export secrets to environment variables
        run: |
          echo "USERNAME=${{ steps.secrets.outputs.USERNAME }}" >> $GITHUB_ENV
          echo "PASSWORD=${{ steps.secrets.outputs.PASSWORD }}" >> $GITHUB_ENV
      - name: Docker logging to Jfrog
        run: |
          docker login -u ${{ env.USERNAME }} -p ${{ env.PASSWORD }} ${{ env.jfrog_url }}
      - name: Building docker image
        run: |
          IMAGE_NAME="${{ env.jfrog_url }}/${{ env.repopath }}/${{ env.appname }}:${{ env.version }}"
          docker build -f ./Dockerfile -t $IMAGE_NAME .
          docker push $IMAGE_NAME
          echo "IMAGE=$IMAGE_NAME" >> $GITHUB_ENV
      - name: connecting to GKE cluster
        run: |
          echo "USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $GITHUB_ENV
          gcloud container clusters get-credentials ${{ env.cluster_name }} --region ${{ env.region }} --project ${{ inputs.project_id }}
      - name: creating kubernets secret contains jfrod artifactory details
        run: |
          kubectl delete secret jfrog-docker-secret
          kubectl create secret docker-registry jfrog-docker-secret \
            --docker-server=artifactory987.jfrog.io \
            --docker-username=${{ env.USERNAME }} \
            --docker-password=${{ env.PASSWORD }}
      - name: deploying application
        run: |
          sed -i "s#image_name#${{ env.IMAGE }}#g" k8s/deployment.yaml
          kubectl apply -f k8s/*
          kubectl rollout status deployment myapp
      - name: Commit Updated Version
        if: success()  # Only run this step if all previous steps are successful
        run: |
          echo "${{ env.version }}" > VERSION
          git config user.name "alearning2554"
          git config user.email "learningcloud4@gmail.com"
          git add VERSION
          git commit -m "Increment version to ${{ env.version }}"
          git push origin HEAD:${{ github.ref_name }}